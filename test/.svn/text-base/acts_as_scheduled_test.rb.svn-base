require 'test/unit'
require 'rubygems'
require 'active_record'

require "#{File.dirname(__FILE__)}/../init"

require File.join(File.dirname(__FILE__), '../../../../test', 'test_helper.rb')

class ScheduledThing < ActiveRecord::Base #:nodoc:
    acts_as_scheduled
end
  
class ActsAsScheduledTest < Test::Unit::TestCase #:nodoc:

    def setup  
      ActiveRecord::Schema.define do
        
        create_table :scheduled_things, :force => true do |t|
          t.string    :name
          t.integer   :frequency
          t.datetime  :last_scheduled 
        end
        
      end
    end
  
    def teardown
      ScheduledThing.delete_all
      ActiveRecord::Base.connection.drop_table(:scheduled_things)
    end


    def test_daily_schedule
      thing = ScheduledThing.new :name =>"minute", :frequency => 1.minute, :last_scheduled => 2.seconds.ago           
      thing.save   
      
      thing = ScheduledThing.new :name =>"day", :frequency => 1.day, :last_scheduled => 25.hours.ago           
      thing.save                 
      
      thing = ScheduledThing.find_next_scheduled
            
      assert_equal("day", thing.name)
    end


    def test_minute_schedule
      thing = ScheduledThing.new :name =>"minute", :frequency => 1.minute, :last_scheduled => 70.seconds.ago           
      thing.save   
      
      thing = ScheduledThing.new :name =>"day", :frequency => 1.day, :last_scheduled => 23.hours.ago           
      thing.save                 
      
      thing = ScheduledThing.find_next_scheduled
            
      assert_equal("minute", thing.name)
    end



    def test_complex_schedule
      thing = ScheduledThing.new :name =>"", :frequency => 1.minute, :last_scheduled => 2.seconds.ago           
      thing.save   
      
      thing = ScheduledThing.new :name =>"minute", :frequency => 1.minute, :last_scheduled => 2.minutes.ago           
      thing.save         
      
      thing = ScheduledThing.new :name =>"day", :frequency => 1.day, :last_scheduled => 10.hours.ago           
      thing.save  
      
      thing = ScheduledThing.new :name =>"day", :frequency => 1.day, :last_scheduled => 1.minute.ago           
      thing.save           
      
      thing = ScheduledThing.new :name =>"day", :frequency => 1.day, :last_scheduled => 25.hours.ago           
      thing.save                 
      
      thing = ScheduledThing.find_next_scheduled
            
      assert_equal("minute", thing.name)
    end



  def test_schedule_complete
    thing = ScheduledThing.new :name =>"test", :frequency => 1.minute, :last_scheduled => 2.minutes.ago           
    thing.save  
    
    thing = ScheduledThing.find_next_scheduled
    
    last_scheduled = thing.last_scheduled
    
    thing.schedule_complete
    thing.save  
    
    thing = ScheduledThing.find_by_name("test")

    assert(thing.last_scheduled < Time.now) 
    assert(thing.last_scheduled > last_scheduled)
    
    thing = ScheduledThing.find_next_scheduled
    assert(thing.nil?)
  end
  
  
  def test_multiple_schedule_complete
    thing = ScheduledThing.new :name =>"", :frequency => 1.minute, :last_scheduled => 2.minutes.ago           
    thing.save  
  
    thing = ScheduledThing.new :name =>"", :frequency => 1.minute, :last_scheduled => 2.minutes.ago           
    thing.save  

    thing = ScheduledThing.new :name =>"", :frequency => 1.minute, :last_scheduled => 2.minutes.ago           
    thing.save  
    
    (1..3).each do |x|    
      thing = ScheduledThing.find_next_scheduled
      thing.schedule_complete
      thing.save  
    end

    thing = ScheduledThing.find_next_scheduled
    
    assert(thing.nil?)
  end
  

end